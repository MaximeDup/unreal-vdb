// Copyright 2022 Eidos-Montreal / Eidos-Sherbrooke

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
#include "/Engine/Private/ForwardShadowingCommon.ush"
#include "/Engine/Private/ReflectionEnvironmentShared.ush"
#include "/Engine/Private/BRDF.ush"

#include "/Plugin/VdbVolume/Private/VdbCommon.ush"

StructuredBuffer<uint> PrimaryVdbBuffer;

//-----------------------------------------------------------------------------------------------------------
//#if PIXELSHADER
//-----------------------------------------------------------------------------------------------------------

void MainPS(in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position, 
	in FVertexFactoryInterpolantsVSToPS FactoryInterpolants, 
	out float4 OutColor0 : SV_Target0,
	out float OutDepth : SV_Depth
)
{
	ResolvedView = ResolveView();

	uint PrimId = VertexFactoryGetPrimitiveId(FactoryInterpolants);
	float4x4 WorldToLocal = LWCHackToFloat(GetPrimitiveData(PrimId).WorldToLocal);
	float4x4 LocalToWorld = LWCHackToFloat(GetPrimitiveData(PrimId).LocalToWorld);

	// ------------------------------------------------------------------------------------------------------
	// Prepare NanoVDB

	pnanovdb_address_t address; address.byte_offset = 0;
	pnanovdb_grid_handle_t grid; grid.address = address;

	pnanovdb_buf_t grid_buf = PrimaryVdbBuffer;
	pnanovdb_tree_handle_t tree = pnanovdb_grid_get_tree(grid_buf, grid);
	pnanovdb_uint32_t grid_type = pnanovdb_grid_get_grid_type(grid_buf, grid);

	pnanovdb_buf_t root_buf = PrimaryVdbBuffer;
	pnanovdb_root_handle_t root = pnanovdb_tree_get_root(root_buf, tree);

	pnanovdb_readaccessor_t acc;
	pnanovdb_readaccessor_init(acc, root);

	// ------------------------------------------------------------------------------------------------------
	// Trace single ray

	float2 Jitter = float2(0.0, 0.0);
	VdbRay iRay = PrepareRayFromPixel(grid_buf, grid, SvPosition.xy, ResolvedView.BufferSizeAndInvSize.xy, Jitter, 0.0, WorldToLocal); // index/vdb space

	ZeroCrossingHit HitResults;
#ifdef USER_DEFINED_SDF
	// User must provide this function in a custom node (HLSL) in Unreal material editor
	pnanovdb_bool_t Hit = UserDefined_ZeroCrossing(grid_type, grid_buf, acc, iRay.Origin, iRay.TMin, iRay.Direction, iRay.TMax, HitResults.t_hit, HitResults.v0, HitResults.ijk_hit);
#else
	pnanovdb_bool_t Hit = pnanovdb_hdda_zero_crossing_improved(grid_type, grid_buf, acc, iRay.Origin, iRay.TMin, iRay.Direction, iRay.TMax, HitResults.t_hit, HitResults.v0, HitResults.ijk_hit);
#endif

	if (!Hit)
	{
		discard;
	}

	// ------------------------------------------------------------------------------------------------------
	// Compute world normal & position

	pnanovdb_vec3_t iNormal = ZeroCrossingNormal(grid_type, grid_buf, acc, HitResults); // index/vdb space normal
	pnanovdb_vec3_t wNormal = IndexToWorldDirection(iNormal, LocalToWorld, grid_buf, grid);

	// This is the same as: iPos = iRay.Origin + HitResults.t_hit * iRay.Direction;
	pnanovdb_vec3_t iPos = pnanovdb_coord_to_vec3(HitResults.ijk_hit); // index/vdb space hit position
	pnanovdb_vec3_t wPos = IndexToWorldPosition(iPos, LocalToWorld, grid_buf, grid);

	float3 TranslatedWorldPosition = wPos + LWCHackToFloat(PrimaryView.PreViewTranslation); // override world position

	float4 ClipPos = mul(float4(TranslatedWorldPosition, 1.0), ResolvedView.TranslatedWorldToClip);
	float SceneDepth = ClipPos.z / ClipPos.w;

	// ------------------------------------------------------------------------------------------------------
	// Update material properties

	FactoryInterpolants.TangentToWorld2.xyz = wNormal; // override world normal

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(FactoryInterpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;

	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, true, TranslatedWorldPosition, TranslatedWorldPosition);

	// ------------------------------------------------------------------------------------------------------
	// Update radiance

	half3 EmissiveColor = GetMaterialEmissive(PixelMaterialInputs);
	half3 Albedo = GetMaterialBaseColor(PixelMaterialInputs) * ResolvedView.DiffuseOverrideParameter.w + ResolvedView.DiffuseOverrideParameter.xyz;
	half AmbientOcclusion = GetMaterialAmbientOcclusion(PixelMaterialInputs);
	float3 Lighting = 0.0;

#if !MATERIAL_SHADINGMODEL_UNLIT

#ifndef IGNORE_DIR_LIGHT
	// Only support single directional lighting
	float NoL = saturate(dot(wNormal, ResolvedView.DirectionalLightDirection));
	float3 LightColor = ResolvedView.DirectionalLightColor;
	float3 LightDir = WorldToIndexDirection(ResolvedView.DirectionalLightDirection, WorldToLocal, grid_buf, grid); // Index space
		
	float ShadowFactor = 1.0;
	{
		VdbRay ShadowRay; // Index space
		ShadowRay.Origin = iPos + 2.0 * iNormal;
		ShadowRay.Direction = LightDir;
		ShadowRay.TMin = 1.0001f;
		ShadowRay.TMax = POSITIVE_INFINITY;

		if (pnanovdb_hdda_zero_crossing_improved(grid_type, grid_buf, acc, ShadowRay.Origin, ShadowRay.TMin, ShadowRay.Direction, ShadowRay.TMax, HitResults.t_hit, HitResults.v0, HitResults.ijk_hit))
			ShadowFactor = 0.0;
	}

	float3 DiffuseLighting = Diffuse_Lambert(Albedo); // No specular
	Lighting += LightColor * NoL * DiffuseLighting * ShadowFactor;
#endif

	// Ambient / environment. 
	Lighting += Albedo * GetSkySHDiffuse(wNormal) * ResolvedView.SkyLightColor.rgb;
#endif

	float Exposure = ResolvedView.RealTimeReflectionCapture ? ResolvedView.RealTimeReflectionCapturePreExposure : ResolvedView.PreExposure;
	OutColor0 = float4((AmbientOcclusion * Lighting + EmissiveColor) * Exposure, 1.0);
	OutDepth = SceneDepth;
}
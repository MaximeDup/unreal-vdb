// Copyright 2022 Eidos-Montreal / Eidos-Sherbrooke

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/Random.ush"
#include "/Engine/Private/ReflectionEnvironmentShared.ush"

#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
#include "/Plugin/VdbVolume/Private/VdbCommon.ush"

int4 CustomIntData0;
float4 CustomFloatData0;
float4 CustomFloatData1;
StructuredBuffer<uint>	PrimaryVdbBuffer;
StructuredBuffer<uint>	SecondaryVdbBuffer;

// I can't make a custom MaterialExpression from a plugin. 
// It's far from ideal but I have to adapt and use a 
// mix of material params, and component params.
#define MAX_NUM_STEPS uint(CustomIntData0.x)
#define SAMPLES_PER_PIXEL uint(CustomIntData0.y)
#define SAMPLES_PER_PIXEL_FLOAT float(CustomIntData0.y)

#define LOCAL_STEP_SIZE CustomFloatData0.x
#define SHADOW_STEP_SIZE_MULT CustomFloatData0.y
#define VOXEL_SIZE CustomFloatData0.z

#define ANISOTROPY CustomFloatData1.x
#define ALBEDO CustomFloatData1.y
#define BLACKBODY_INTENSITY CustomFloatData1.z
#define BLACKBODY_TEMPERATURE CustomFloatData1.w

#ifdef USE_TRILINEAR_SAMPLING
	#define SAMPLING TrilinearSampling
#else
	#define SAMPLING ReadValue
#endif

//-----------------------------------------------------------------------------------------------------------
// Unreal Volumetric Material specific
//-----------------------------------------------------------------------------------------------------------

void UpdateMaterialParam(
	inout FMaterialPixelParameters MaterialParameters,
	float3 AbsoluteWorldPosition,
	in ViewState InputView)
{
	MaterialParameters.AbsoluteWorldPosition = LWCPromote(AbsoluteWorldPosition);
	MaterialParameters.WorldPosition_CamRelative = LWCToFloat(LWCAdd(MaterialParameters.AbsoluteWorldPosition, InputView.PreViewTranslation));
	//MaterialParameters.WorldPosition_NoOffsets;				// TODO
	//MaterialParameters.WorldPosition_NoOffsets_CamRelative;	// TODO
	MaterialParameters.CameraVector = normalize(LWCToFloat(LWCSubtract(InputView.WorldCameraOrigin, MaterialParameters.AbsoluteWorldPosition)));
}

half3 SampleExtinctionCoefficients(in FPixelMaterialInputs PixelMaterialInputs)
{
	// w value is not set. don't try to use it
	half3 Extinction = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs).xyz;
	return Extinction;
}

half3 SampleEmissive(in FPixelMaterialInputs PixelMaterialInputs)
{
	half3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);
	return clamp(EmissiveColor, 0.0f, 65000.0f);
}

// RGB is albedo aka scattering for volumes, A is volume albedo
half3 SampleAlbedo(in FPixelMaterialInputs PixelMaterialInputs)
{
	half3 Albedo = 1.0;
#if !MATERIAL_SHADINGMODEL_UNLIT
	Albedo = GetMaterialBaseColorRaw(PixelMaterialInputs) * View.DiffuseOverrideParameter.w + View.DiffuseOverrideParameter.xyz;
#endif
	return Albedo;
}

// Unused for now
half SampleAmbientOcclusion(in FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialAmbientOcclusion(PixelMaterialInputs);
}

// Raymarch towards light. Compute shadow transmittance
float3 GetLightTransmittance(
	pnanovdb_vec3_t bbox_min,
	pnanovdb_vec3_t bbox_max,
	VdbRay Ray,
	VdbSampler DensitySampler,
	float3 SigmaT,
	float4x4 LocalToWorld,
	in out RandomSequence RandSequence,
	FMaterialPixelParameters MaterialParameters)
{
	pnanovdb_bool_t hit = pnanovdb_hdda_ray_clip(bbox_min, bbox_max, Ray.Origin, Ray.TMin, Ray.Direction, Ray.TMax);
	if (!hit)
		return 1.0f;

	float RaymarchDistance = Ray.TMax - Ray.TMin;
	float StepSize = (LOCAL_STEP_SIZE * SHADOW_STEP_SIZE_MULT) / VOXEL_SIZE; // Index Space
	const uint NumSteps = min(ceil(RaymarchDistance / StepSize), MAX_NUM_STEPS);
	float StepWorldMeters = StepSize * CENTIMETER_TO_METER;

	FPixelMaterialInputs PixelMaterialInputs = (FPixelMaterialInputs)0;

	float AccumDensity = 0.0;
	for (uint iStep = 0; iStep < NumSteps; ++iStep)
	{
		float s = Ray.TMin + (iStep + RandomSequence_GenerateSample1D(RandSequence)) * StepSize;
		pnanovdb_vec3_t iPos = pnanovdb_hdda_ray_start(Ray.Origin, s, Ray.Direction);

		// Update coordinates
		float3 WorldPos = IndexToWorldPosition(iPos, LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);
		// Update Material parameters
		UpdateMaterialParam(MaterialParameters, WorldPos, ResolvedView);
		// Sample material
		CalcPixelMaterialInputs(MaterialParameters, PixelMaterialInputs);
		// Only sample Extinction
		half3 Extinction = SampleExtinctionCoefficients(PixelMaterialInputs);

		float Density = ReadValue(iPos, DensitySampler.GridBuffer, DensitySampler.GridType, DensitySampler.Accessor);
		AccumDensity += UpdateDensity(Density, Extinction);
	}
	return exp(-AccumDensity * StepWorldMeters * SigmaT);
}

//-----------------------------------------------------------------------------------------------------------
// Tracing through a NanoVDB volume
//-----------------------------------------------------------------------------------------------------------

float4 RaymarchFogVolume(
	VdbSampler DensitySampler,
#if USE_SECONDARY_VDB
	VdbSampler TemperatureSampler,
#endif
	pnanovdb_vec3_t bbox_min,
	pnanovdb_vec3_t bbox_max,

	VdbRay Ray,
	RandomSequence RandSequence,
	FMaterialPixelParameters MaterialParameters,
	float4x4 LocalToWorld,
	float4x4 WorldToLocal,
	float4 SvPosition)
{
	// ------------------------------------------------------------------------
	// Test against volume, and update Ray start/end to fit volume

	if (!CheckBounds(Ray, bbox_min, bbox_max))
		return float4(0.0, 0.0, 0.0, 0.0);

	// ------------------------------------------------------------------------
	// Set up lighting

	float Transmittance = 1.f;
	float3 Radiance = 0.0;

#if !MATERIAL_SHADINGMODEL_UNLIT
	float3 LightDir = WorldToIndexDirection(View.DirectionalLightDirection, WorldToLocal, DensitySampler.GridBuffer, DensitySampler.Grid); // Index space
	float3 LightCol = View.DirectionalLightColor.rgb;
	float CosThetaPhase = dot(LightDir, Ray.Direction);

	float3 EnvLight = GetSkySHDiffuseSimple(float3(0.0f, 0.0f, 0.0f)); // without SH directionality
#endif

	// ------------------------------------------------------------------------
	// Raymarch with fixed steps

	float StepSize = LOCAL_STEP_SIZE / VOXEL_SIZE; // Index space
	float RaymarchDistance = Ray.TMax - Ray.TMin; // Index space
	const uint NumSteps = min(ceil(RaymarchDistance / StepSize), MAX_NUM_STEPS);
	float StepWorldMeters = StepSize * CENTIMETER_TO_METER;

	FPixelMaterialInputs PixelMaterialInputs = (FPixelMaterialInputs)0;

	for (uint iStep = 0; iStep < NumSteps; ++iStep)
	{
		float s = Ray.TMin + (iStep + RandomSequence_GenerateSample1D(RandSequence)) * StepSize;
		pnanovdb_vec3_t iPos = pnanovdb_hdda_ray_start(Ray.Origin, s, Ray.Direction);

		// Update coordinates
		float3 WorldPos = IndexToWorldPosition(iPos, LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);
		// Update Material parameters
		UpdateMaterialParam(MaterialParameters, WorldPos, ResolvedView);
		// Sample material
		CalcPixelMaterialInputs(MaterialParameters, PixelMaterialInputs);
		// Sample Material
		half3 EmissiveColor = SampleEmissive(PixelMaterialInputs);
		half3 Extinction = SampleExtinctionCoefficients(PixelMaterialInputs);
		half3 Scattering = SampleAlbedo(PixelMaterialInputs);
		const float Albedo = ALBEDO;
		const float Anisotropy = ANISOTROPY;

		float Density = SAMPLING(s, Ray, DensitySampler.GridBuffer, DensitySampler.GridType, DensitySampler.Accessor);
		Density = UpdateDensity(Density, Extinction);
		if (Density == 0.0) continue; 

		// Compute scattering and absorption coefficients
		float3 SigmaT = Scattering; // Extinction
		float3 SigmaS = SigmaT * Albedo; // Scattering
		float3 SigmaA = SigmaT - SigmaS; // Absorption

		// ------------------------------------------------------------------------
		// Update total Radiance with all incoming ligth sources

		float StepTransmittance = Transmittance * StepWorldMeters * Density;

		Radiance += StepTransmittance * SigmaA * EmissiveColor; // Emissive
#if !MATERIAL_SHADINGMODEL_UNLIT
		Radiance += StepTransmittance * SigmaS * EnvLight; // Ambient

		// Only support single directional lighting.
		{
			VdbRay ShadowRay;
			ShadowRay.Origin = iPos; // Index space
			ShadowRay.Direction = LightDir; // Index space
			ShadowRay.TMin = 0.0f;
			ShadowRay.TMax = POSITIVE_INFINITY;

			float LightTransmittance = GetLightTransmittance(
				bbox_min, bbox_max, ShadowRay, 
				DensitySampler, SigmaT, 
				LocalToWorld, RandSequence, MaterialParameters);
			Radiance += StepTransmittance * SigmaS * LightTransmittance * LightCol * PhaseHG(CosThetaPhase, Anisotropy);
		}
#endif

#if USE_SECONDARY_VDB
		// Second VDB buffer should be Temperature to simulate a blackbody volume
		float Temperature = ReadValue(iPos, TemperatureSampler.GridBuffer, TemperatureSampler.GridType, TemperatureSampler.Accessor) * BLACKBODY_TEMPERATURE;
		float3 TemperatureColor = ColorTemperatureToRGB(Temperature) * BLACKBODY_INTENSITY;

		Radiance += StepTransmittance * SigmaA * TemperatureColor;
#endif

		// Update Transmittance
		Transmittance *= exp(-StepWorldMeters * Density * SigmaT);

		const float Threshhold = 0.01f;
		if (all(Transmittance < Threshhold))
		{
#if !MATERIAL_SHADINGMODEL_UNLIT
			// Artificially boosting missing ambient contribution. I'm making this up.
			Radiance += Threshhold * SigmaS * EnvLight; 
#endif
			Transmittance = 0.0;
			break;
		}
	}
	
	return float4(Radiance, 1.0 - Average(Transmittance));
}

//-----------------------------------------------------------------------------
//#if PIXELSHADER
//-----------------------------------------------------------------------------

void MainPS(in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position, 
	in FVertexFactoryInterpolantsVSToPS FactoryInterpolants, 
	out float4 OutColor0 : SV_Target0
)
{
	ResolvedView = ResolveView();

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(FactoryInterpolants, SvPosition);

	uint PrimId = VertexFactoryGetPrimitiveId(FactoryInterpolants);
	float4x4 WorldToLocal = LWCHackToFloat(GetPrimitiveData(PrimId).WorldToLocal);
	float4x4 LocalToWorld = LWCHackToFloat(GetPrimitiveData(PrimId).LocalToWorld);

	float DeviceZ = VdbParams.SceneDepthTexture.Load(int3(SvPosition.xy, 0)).x; // backbuffer depth

	// ------------------------------------------------------------------------
	// Prepare NanoVDB

	VdbSampler DensitySampler = InitVdbSampler(PrimaryVdbBuffer);
#if USE_SECONDARY_VDB
	VdbSampler TemperatureSampler = InitVdbSampler(SecondaryVdbBuffer);
#endif

	// Global values (could be computed on CPU, and passed to shader instead)
	pnanovdb_vec3_t bbox_min = pnanovdb_coord_to_vec3(pnanovdb_root_get_bbox_min(DensitySampler.GridBuffer, DensitySampler.Root));
	pnanovdb_vec3_t bbox_max = pnanovdb_coord_to_vec3(pnanovdb_root_get_bbox_max(DensitySampler.GridBuffer, DensitySampler.Root));

	// ------------------------------------------------------------------------
	// Prepare variables

	float4 Radiance = 0.0;

	uint LinearIndex = SvPosition.y * ResolvedView.BufferSizeAndInvSize.x + SvPosition.x;

	// ------------------------------------------------------------------------
	// Trace rays and accumulate
	
	for (uint SampleIndex = 0; SampleIndex < SAMPLES_PER_PIXEL; ++SampleIndex)
	{
		RandomSequence RandSequence;
		RandomSequence_Initialize(RandSequence, LinearIndex, SampleIndex);

		float2 Jitter = (SampleIndex > 0) ? RandomSequence_GenerateSample2D(RandSequence) - 0.5 : 0.0;
		VdbRay iRay = PrepareRayFromPixel(DensitySampler.GridBuffer, DensitySampler.Grid, SvPosition.xy, ResolvedView.BufferSizeAndInvSize.xy, Jitter, DeviceZ, WorldToLocal); // index/vdb space

		Radiance += RaymarchFogVolume(
							DensitySampler,
							#if USE_SECONDARY_VDB
								TemperatureSampler,
							#endif
							bbox_min, bbox_max, iRay, 
							RandSequence, MaterialParameters, 
							LocalToWorld, WorldToLocal, SvPosition);
	}

	Radiance /= SAMPLES_PER_PIXEL_FLOAT;

	if (Radiance.a == 0.0f)
	{
		discard;
	}

	Radiance.rgb *= ResolvedView.RealTimeReflectionCapture ? ResolvedView.RealTimeReflectionCapturePreExposure : ResolvedView.PreExposure;

	OutColor0 = Radiance;
}